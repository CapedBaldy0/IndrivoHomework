@page "/Reset-password"

@using IndrivoHomework.Models;
@using MimeKit;
@using System.Net.Mail;
@using System.Net;

@inject IJSRuntime js
@inject DbHelper dbHelper
@inject AuthenticationStateProvider auth
@inject NavigationManager nav
@inject ISnackbar Snackbar

<PageTitle>Reset Password</PageTitle>

<div class="d-flex flex-column justify-center align-center">

    <MudText Class="mb-2" Typo="Typo.h4">Reset Password</MudText>

    <MudForm Model="model" Validation="@(userValidator.ValidateValue)" ValidationDelay="0" @bind-IsValid="isValid" Class="d-flex justify-center" Style="width: 100%">
        <MudCard Outlined="true" Style="flex-grow: 1; max-width: 400px">
            @if (codeIsValid)
            {
                <MudCardContent>
                    <MudTextField Class="mt-3" @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  Immediate="true"
                                  Label="Enter new password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="ResetUserPassword" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(isValid == false)" FullWidth="true">Reset Password</MudButton>
                </MudCardActions>
            }
            else if (codeSent)
            {
                <MudCardContent>
                    <MudText Typo="Typo.h6">Code sent to email (@model.Email). Enter code to reset password</MudText>
                    <MudTextField Class="mt-3" @bind-Value="inputCode"
                                  For="@(() => inputCode)"
                                  Immediate="true"
                                  Label="Reset Code" />
                    @if (isError)
                    {
                        <MudAlert Class="mt-3" Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => isError = false)">Reset code is incorect</MudAlert>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="VerifyCode" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Verify code</MudButton>
                </MudCardActions>
            }
            else
            {
                <MudCardContent>
                    <MudTextField @bind-Value="model.Email"
                                  For="@(() => model.Email)"
                                  Immediate="true"
                                  Label="Email" />
                    @if (isError)
                    {
                        <MudAlert Class="mt-3" Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="(() => isError = false)">No Account with email adress: @model.Email was found</MudAlert>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="SendResetPasswordMail" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(isValid == false)" FullWidth="true">Submit</MudButton>
                </MudCardActions>
            }
        </MudCard>
    </MudForm>
</div>

@code
{
    private UserModel model = new();
    private UserModelFluentValidator userValidator = new UserModelFluentValidator();
    private bool isValid;
    private bool isError;
    private bool codeSent;
    private string? code;
    private string? inputCode;
    private bool codeIsValid;

    private void SendResetPasswordMail()
    {
        try
        {
            var usedEmails = dbHelper.GetUsedEmails();

            if (usedEmails.Contains(model.Email))
            {
                code = new Random().Next(0, 1000000).ToString("D6");

                var email = new MailMessage();
                email.To.Add(new MailAddress(model.Email));
                email.From = new MailAddress("IndrivoHomeworkApp@gmail.com");
                email.Subject = "Password reset code";
                email.Body = $@"The code to reset your password is: {code} <br>
                                Enter it inside the app to reset your password";
                email.IsBodyHtml = true;

                using var smtp = new SmtpClient("smtp.gmail.com")
                    {
                        Port = 587,
                        Credentials = new NetworkCredential("joneshordi@gmail.com", "pziz dnia akzc fbzx"),
                        EnableSsl = true,
                    };

                smtp.Send(email);

                codeSent = true;
            }
            else
            {
                isError = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        StateHasChanged();
    }

    private void VerifyCode()
    {
        isError = false;

        if (inputCode == code)
        {
            codeIsValid = true;
            isValid = false;
        }
        else
        {
            isError = true;
        }

        StateHasChanged();
    }

    private void ResetUserPassword()
    {
        try
        {
            dbHelper.ResetPassword(model.Email, model.Password);

            nav.NavigateTo("/login");

            Snackbar.Add("Your password was reset successfully\nYou can now log in", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        StateHasChanged();
    }
}
